name: Sync Releases from NewAlist/alist

on:
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * *'

permissions:
  contents: write
  packages: write

jobs:
  sync-releases:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout your repo
        uses: actions/checkout@v4

      - name: Checkout upstream repo
        uses: actions/checkout@v4
        with:
          repository: NewAlist/alist
          path: upstream

      - name: Setup GitHub CLI
        uses: cli/cli@v2.69.0

      - name: Get all tags from upstream repo
        id: get_tags
        run: |
          cd upstream
          git fetch --tags
          TAGS=$(git tag)
          echo "tags=$TAGS" >> $GITHUB_OUTPUT

      - name: Download and sync releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          cd upstream
          # 创建临时工作目录
          mkdir -p ../release-assets
          IFS=' ' read -r -a tag_array <<< "${{ steps.get_tags.outputs.tags }}"
          
          for TAG in "${tag_array[@]}"
          do
            echo "Processing release tag: $TAG"
            # 获取 release 信息JSON
            RELEASE_JSON=$(gh release view "$TAG" --repo NewAlist/alist --json tagName,name,body --jq '.')
            if [ -z "$RELEASE_JSON" ]; then
              echo "No release found for tag $TAG, skip."
              continue
            fi
            # 下载release资产
            mkdir -p "../release-assets/$TAG"
            gh release download "$TAG" --repo NewAlist/alist -D "../release-assets/$TAG"

            # 切换到你的repo根目录准备上传release
            cd ../
            # 创建或更新 Release（如果存在则更新）
            gh release view "$TAG" --repo $GITHUB_REPOSITORY > /dev/null 2>&1
            if [ $? -eq 0 ]; then
              echo "Release $TAG exists, updating..."
              gh release upload "$TAG" --repo $GITHUB_REPOSITORY ../release-assets/$TAG/* --clobber
            else
              # 取上游release名字和body
              RELEASE_NAME=$(echo "$RELEASE_JSON" | jq -r '.name')
              RELEASE_BODY=$(echo "$RELEASE_JSON" | jq -r '.body')
              echo "Creating release $TAG"
              gh release create "$TAG" ../release-assets/$TAG/* --repo $GITHUB_REPOSITORY -t "$RELEASE_NAME" -n "$RELEASE_BODY"
            fi

            # 返回upstream目录准备处理下一个
            cd upstream
          done
